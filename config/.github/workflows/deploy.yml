name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set environment variables
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "prod" || "${{ github.ref }}" == "refs/heads/main" && "${{ github.event.inputs.environment }}" == "" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "TAG=latest" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "ENV=staging" >> $GITHUB_ENV
            echo "TAG=staging" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
            echo "TAG=dev" >> $GITHUB_ENV
          fi
          echo "REGISTRY=ghcr.io/${{ github.repository_owner }}/joromigpt" >> $GITHUB_ENV

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/frontend:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API Gateway
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/api-gateway/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/api-gateway:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push LLM Layer
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/ai-infrastructure/llm-layer/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/llm-layer:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push ASR Layer
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/ai-infrastructure/asr-layer/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/asr-layer:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push TTS Layer
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/ai-infrastructure/tts-layer/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/tts-layer:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Translation Layer
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/ai-infrastructure/translation-layer/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/translation-layer:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "prod" || "${{ github.ref }}" == "refs/heads/main" && "${{ github.event.inputs.environment }}" == "" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "CONFIG_FILE=docker-compose.prod.yml" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "ENV=staging" >> $GITHUB_ENV
            echo "CONFIG_FILE=docker-compose.staging.yml" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
            echo "CONFIG_FILE=docker-compose.dev.yml" >> $GITHUB_ENV
          fi
          echo "REGISTRY=ghcr.io/${{ github.repository_owner }}/joromigpt" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster joromigpt-${{ env.ENV }} --service joromigpt-service --force-new-deployment

      - name: Send notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "ðŸš€ JoromiGPT has been deployed to ${{ env.ENV }} environment!"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}